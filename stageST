Pour ce stage, l’étudiant intègrera l'équipe "Computing and Compilers Center" de la division DT / Digital Technology. Cette équipe est en charge du développement des compilateurs pour les processeurs utilisés par le groupe MDG / Microcontrollers / Digital ICs and RF products Group.
Ce stage s'inscrit dans un projet de génération par un compilateur de contre-mesures logicielles contre les attaques par injection de faute. Ces contre-mesures logicielles sont générées automatiquement par le module SecSwift qui est développé dans notre équipe pour le compilateur LLVM. Ce stage vise à améliorer les informations émises par ce module SecSwift à destination de l'utilisateur.
La première partie du stage s'effectuera dans le back-end du compilateur LLVM pour le processeur RISC-V.
Le compilateur émet des informations, sous forme d'annotations dans un fichier YAML d'une part, et sous forme d'information de debug au format DWARF d'autre part. Il s'agira d'améliorer la précision de ces informations et d'en ajouter de nouvelles. Des modifications dans le module SecSwift qui génère ces informations pourront être nécessaires La seconde partie du stage s'effectuera sur des modules d'extension de l'environnement Visual Studio Code (VSCode). Ces modules sont en charge de la restitution sous forme visuelle pour un utilisateur des informations émises par le compilateur. Un module d'extension a été développé pour un affichage de ces informations dans une vue du code source d'une application, et un autre module est en charge de l'affichage dans une vue du code binaire résultant de la compilation de l'application. Il s'agira dans un premier temps de vérifier et d'améliorer l'exactitude des informations affichées par ces modules. Dans un second temps, des solutions de vérification automatique pourront être mises en œuvre afin de garantir que le comportement de ces extensions n'est pas dégradé lors d'une évolution du compilateur ou de l'interface VSCode.

Les instructions dans les sets DUP et CFG dans ton analyse doivent être marquées avec des flags 
MI->setFlag(SecSwift_...); 
Dans STxP5SecSwiftPeephole.cpp, il faut faire ton analyse dans une fonction indépendante, à faire tourner avant la boucle qui va supprimer les SECSWIFT_*INFO 
Il faudra aussi ajouter la suppression des SECSWFT_DUPINFO, comme SECSWIFT_SIGINFO 

avec cette structure: 
Elle	donne	le	cadre	scientifique	et	technique	du	travail	réalisé.
Elle	doit :
-		présenter	le	problème	dans	son	contexte large	
-		préciser	le	sujet	du	travail	à	faire,	ses	limites,	donner	la	problématique.
-		annoncer	le	plan	du	rapport
